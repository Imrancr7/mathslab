1.Dijkstra algorithm
from heapq import heappush, heappop


def dijkstra(graph, start):
    distance = {start: 0}
    queue = [(0, start)]
    while queue:
        (dist, current) = heappop(queue)
        if current in graph:
            for neighbor in graph[current]:
                new_dist = dist + graph[current][neighbor]
                if neighbor not in distance or new_dist < distance[neighbor]:
                    distance[neighbor] = new_dist
                    heappush(queue, (new_dist, neighbor))
    return distance


graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}
start = 'A'

result = dijkstra(graph, start)
print("The shortest distance from", start, "to each node:", result)

2.krushkal algorithm

def find(parent, i):
    if parent[i] == i:
        return i
    return find(parent, parent[i])


def union(parent, rank, x, y):
    rootx = find(parent, x)
    rooty = find(parent, y)

    if rootx != rooty:
        if rank[rootx] < rank[rooty]:
            parent[rootx] = rooty
        elif rank[rootx] > rank[rooty]:
            parent[rooty] = rootx
        else:
            parent[rooty] = rootx
            rank[rootx] += 1


def kruskal(graph, V):
    result = []
    i = 0
    e = 0
    graph = sorted(graph, key=lambda item: item[2])
    parent = []
    rank = []
    for node in range(V):
        parent.append(node)
        rank.append(0)

    while e < V - 1:
        u, v, w = graph[i]
        i = i + 1
        x = find(parent, u)
        y = find(parent, v)

        if x != y:
            e = e + 1
            result.append([u, v, w])
            union(parent, rank, x, y)
    return result


V = 4
E = 5
graph = [[0, 1, 10],
         [0, 2, 6],
         [0, 3, 5],
         [1, 3, 15],
         [2, 3, 4],
         ]

result = kruskal(graph, V)

for u, v, weight in result:
    print("%d - %d: %d" % (u, v, weight))

3.Poisson distribution

import math


def poisson_prob(lam, k):
    return math.pow(lam, k) * math.exp(-lam) / math.factorial(k)


lam = 2.5  # average number of events in an interval
k = 5      # number of events to consider

result = poisson_prob(lam, k)

print("The probability of exactly", k, "events in an interval with average", lam, "events is",
      result)

4.Exponential distribution
import math


def exponential_prob(lam, x):
    return 1 - math.exp(-lam * x)


lam = 2.5  # rate of events
x = 2      # time interval

result = exponential_prob(lam, x)

print("The probability of an event happening in the first",
      x, "seconds with rate", lam, "per second is", result)

5.normal distribution

import math


def normal_prob(mu, sigma, x):
    return 1/math.sqrt(2*math.pi*math.pow(sigma, 2)) * math.exp(-math.pow(x-mu, 2) / (2 * math.pow(sigma, 2)))


mu = 0    # mean
sigma = 1  # standard deviation
x = 1     # the value to consider

result = normal_prob(mu, sigma, x)

print("The probability of x =", x, "with mean =", mu,
      "and standard deviation =", sigma, "is", result)
